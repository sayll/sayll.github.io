<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>国际化（i18n）</title>
      <link href="/posts/60041/"/>
      <url>/posts/60041/</url>
      
        <content type="html"><![CDATA[<h1 id="国际化（i18n）"><a href="#国际化（i18n）" class="headerlink" title="国际化（i18n）"></a>国际化（i18n）</h1><h2 id="面对的问题"><a href="#面对的问题" class="headerlink" title="面对的问题"></a>面对的问题</h2><h3 id="文案"><a href="#文案" class="headerlink" title="文案"></a>文案</h3><ul><li><p>静态文案翻译</p><blockquote><p>使用i18n国际化插件匹配字典重新赋值（预估工作量相当大，尽量配合编辑器插件直接进行机翻，后续再给业务人员校准）</p></blockquote></li><li><p>动态文案翻译(server端下发的动态数据)</p></li></ul><h3 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h3><ul><li>不同语言长度不一样造成的样式错乱<blockquote><p>根据语言切兼容样式的class</p></blockquote></li></ul><h3 id="图片替换"><a href="#图片替换" class="headerlink" title="图片替换"></a>图片替换</h3><h3 id="时区问题"><a href="#时区问题" class="headerlink" title="时区问题"></a>时区问题</h3><h3 id="长文案加变量的翻译问题"><a href="#长文案加变量的翻译问题" class="headerlink" title="长文案加变量的翻译问题"></a>长文案加变量的翻译问题</h3><h3 id="切换语言与服务端数据间的更新"><a href="#切换语言与服务端数据间的更新" class="headerlink" title="切换语言与服务端数据间的更新"></a>切换语言与服务端数据间的更新</h3><blockquote><p>兜底解决，直接刷新当前页面</p></blockquote><h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><ul><li><p>定义国际化配置<br>定义的方式有多种，多以文件的形式单独保存，如json，js，properties 等，并且将配置信息以键值对的形式保存备用</p><blockquote><p>当前采用JSON格式，易于后期远端维护及更新</p></blockquote></li><li><p>根据环境读取配置</p></li></ul><ol><li>hash型：#cn; #en; #us</li><li>saerch型：?lan=cn; ?lan=en; ?lan=us</li><li>url/meta型： 163.com/cn/; 163.com/en</li><li>缓存型：缓存形式多为cookie，默认cn，用户重新设定后将缓存更新<blockquote><p>当前方案采用缓存型，默认根据用户浏览器设置的语言自动选择，兜底语言默认设置为 <code>en</code>，语言状态会存储再本地storage及cookie中。</p></blockquote></li></ol><h2 id="具体方案"><a href="#具体方案" class="headerlink" title="具体方案"></a>具体方案</h2><p><code>react-i18next</code>  + <code>i18next-browser-languagedetector</code> + <code>i18next-http-backend</code></p><ul><li><strong>react-i18next</strong>: 作为主核心，提供对语言包切换及字段映射的支持</li><li><strong>i18next-browser-languagedetector</strong>: 用来初始化语言环境，针对用户的浏览器进行嗅探，使用对用的语言包，并维护切换后的语言信息（存储在本地localstorage及cookie - 后续后端可直接根据cookie中的该字段进行对应处理）</li><li><strong>i18next-http-backend</strong>: 提供了语言包异步加载的能力，后续支持到远端维护语言包的能力</li></ul><h2 id="Antd国际化"><a href="#Antd国际化" class="headerlink" title="Antd国际化"></a>Antd国际化</h2><p>通过对 react-i18next 中 <code>useTranslation</code> 拿到 i18n 中的 当前的 语言信息，再通过顶层容器 <code>ConfigProvider</code> 动态的切换对应的 Antd 语言包</p><h2 id="编辑器配套插件"><a href="#编辑器配套插件" class="headerlink" title="编辑器配套插件"></a>编辑器配套插件</h2><p>希望通过插件形式，简化前期开发流程，尽可能减少国际化对研发效率的影响。</p><h3 id="VSCode-i18n-Ally"><a href="#VSCode-i18n-Ally" class="headerlink" title="VSCode - i18n Ally"></a>VSCode - i18n Ally</h3><ul><li><p>VSCode插件直接搜索 <code>i18n Ally</code> 进行安装</p></li><li><p>打开命令工具 <code>Cmd + Shift + P</code> 输入 <code>i18n</code> 过滤出 <code>i18n Ally</code> 命令，自动设置语言包地址（未能识别可手动选择）<br><img src="https://pic.imgdb.cn/item/61318d9344eaada73993a5cc.jpg" alt=":-"></p></li><li><p>终端下方可选择显示自己希望显示的语言<br><img src="https://pic.imgdb.cn/item/61318dc444eaada73993fe11.jpg" alt=":-"><br>这样就能在文本失焦状态显示对应的语言译本，选中后又能显示源码<br><img src="https://pic.imgdb.cn/item/61318e0944eaada7399470df.jpg" alt=":-"><br><img src="https://pic.imgdb.cn/item/61318e2644eaada73994a4bb.jpg" alt=":-"></p></li><li><p>快速提取文本至本地化文件<br>选中文本内容 打开命令工具 <code>Cmd + Shift + P</code> 选择 <code>提取文案到i18n</code>（建议将此设置为快捷键）<br><img src="https://pic.imgdb.cn/item/61318e7544eaada73995301e.jpg" alt=":-"><br>新建路径时可用 <code>.</code> 分隔，这样就可以形成嵌套<br><img src="https://pic.imgdb.cn/item/61318f1244eaada7399649ba.jpg" alt=":-"><br>然后选中你使用的语法<br><img src="https://pic.imgdb.cn/item/61318f2b44eaada7399673f9.jpg" alt=":-"><br>再回头看一下本地化的JSON文件，我们可以发现所有文件都新增了该字段，默认的语言文件也已成功填充该字段，剩下就是翻译未翻译的对应语言。<br><img src="https://pic.imgdb.cn/item/61318f5244eaada73996b0a2.jpg" alt=":-"><br>我们再利用工具直接将未翻译的语言直接通过机翻，待后续业务人员二次校准<br><img src="https://pic.imgdb.cn/item/6131908044eaada73998d6d0.jpg" alt=":-"><br>点击翻译文案，如果没有意外的话对应的文本就成功翻译并赋值该字段</p><blockquote><p>因为此处调用的机翻接口是谷歌，可能会因为ip污染导致调用失败，可以间隔一段时间再尝试调用，插件本身还提供了其它翻译提供商，后续自行研究。</p></blockquote></li></ul><blockquote><p>文档地址：<a href="https://github.com/lokalise/i18n-ally/wiki">lokalise/i18n-ally</a></p></blockquote><h3 id="WebStorm-待续…"><a href="#WebStorm-待续…" class="headerlink" title="WebStorm 待续…."></a>WebStorm 待续….</h3><p>目前看了一下，i18n Ally 没提供 WebStorm 的版本，其它插件使用感觉还是有些欠佳…</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Blog之Valine Admin（二）LeanCloud唤醒服务</title>
      <link href="/posts/810/"/>
      <url>/posts/810/</url>
      
        <content type="html"><![CDATA[<h2 id="休眠策略概述"><a href="#休眠策略概述" class="headerlink" title="休眠策略概述"></a>休眠策略概述</h2><p>标准实例不会休眠，体验实例会执行休眠策略：</p><ul><li>如果应用最近一段时间（半小时）没有任何外部请求，则休眠。</li><li>休眠后如果有新的外部请求实例则马上启动。访问者的体验是第一个请求响应时间是 5 ~ 30 秒（视实例启动时间而定），后续访问响应速度恢复正常。</li><li>强制休眠：如果最近 24 小时内累计运行超过 18 小时，则强制休眠。此时新的请求会收到 503 的错误响应码，该错误可在 云服务控制台 &gt; 云引擎 &gt; 云引擎分组 &gt; 统计 中查看。</li></ul><blockquote><p>官方文档：<a href="https://leancloud.cn/docs/leanengine_faq.html#hash-537731313">云引擎采用什么样的休眠策略？</a></p></blockquote><h2 id="定时任务设置"><a href="#定时任务设置" class="headerlink" title="定时任务设置"></a>定时任务设置</h2><p><img src="https://pic.imgdb.cn/item/610a5fb65132923bf8af2729.jpg" alt="创建定时任务"><br>Valine Admin 存在2种云函数，我们会针对性创建2个定时任务，国内版使用北京时间（东八区），国际版使用 UTC+0 时区。</p><ul><li><p><code>self-wake</code> 云函数：自动唤醒服务器</p><blockquote><p>Cron表达式为 <code>0 */10 0-15 * * ?</code>，表示每天早8点到晚23点59分每隔10分钟访问云引擎，防止休眠。（间隔时间可以调整，不过不建议超过30分钟，以免出现休眠空档期）</p></blockquote></li><li><p><code>resend-mails</code> 云函数：邮件补发</p><blockquote><p>Cron表达式为 <code>0 0 1 * * ?</code>，表示每天9点检查过去24小时内漏发的通知邮件并补发。</p></blockquote></li></ul><h2 id="LeanCloud-流控问题"><a href="#LeanCloud-流控问题" class="headerlink" title="LeanCloud 流控问题"></a>LeanCloud 流控问题</h2><p>当天运行超过18小时，导致 LeanCloud 休眠后，第二天无法通过内部定时任务正常唤醒。（即’因流控原因，通过定时任务唤醒体验版实例失败’），此时只能通过外部访问二级域名来激活容器。</p><h2 id="腾讯云函数解决-LeanCloud-流控问题"><a href="#腾讯云函数解决-LeanCloud-流控问题" class="headerlink" title="腾讯云函数解决 LeanCloud 流控问题"></a>腾讯云函数解决 LeanCloud 流控问题</h2><p>通过创建 <a href="https://cloud.tencent.com/product/scf">腾讯云云函数</a>，来定时访问二级域名激活容器。<br><img src="https://pic.imgdb.cn/item/610bae785132923bf8550500.jpg" alt="新建云函数1"><br><img src="https://pic.imgdb.cn/item/610bb06d5132923bf85881c8.jpg" alt="新建云函数2"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf8 -*-</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main_handler</span>(<span class="params">event, context</span>):</span></span><br><span class="line">    url=<span class="string">&quot;your URL&quot;</span></span><br><span class="line">    req=urllib.request.Request(url)</span><br><span class="line">    urllib.request.urlopen(req)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;外部访问运行完成！&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/610bb3685132923bf85cc768.jpg" alt="新建云函数3"><br><img src="https://pic.imgdb.cn/item/610bb4845132923bf85ef554.jpg" alt="新建云函数4"></p><p><strong>可查看日志，是否正常运行</strong><br><img src="https://pic.imgdb.cn/item/610bb5d05132923bf860c617.jpg" alt="云函数日志"></p><blockquote><p>运行函数可能存在失败，所以可以通过缩短间隔或者加长定时区间来解决。只要成功一次，后续即可通过 <code>LeanCloud</code> 的定时任务自动唤醒。</p></blockquote><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><blockquote><p><a href="https://leancloud.cn/docs/leanengine_faq.html#hash-537731313">云引擎采用什么样的休眠策略？</a><br><a href="https://deserts.io/valine-admin-document/">Valine Admin 配置手册 - 定时任务设置</a><br><a href="https://mxy493.xyz/2021031963302/">腾讯云函数解决 LeanCloud 流控问题</a><br><a href="https://mxy493.xyz/2021031924011/">解决 LeanCloud ‘因流控原因，通过定时任务唤醒体验版实例失败’ 的问题</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搭建 </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Blog之Valine Admin（一）</title>
      <link href="/posts/58901/"/>
      <url>/posts/58901/</url>
      
        <content type="html"><![CDATA[<h1 id="配置-Valine-Admin"><a href="#配置-Valine-Admin" class="headerlink" title="配置 Valine Admin"></a>配置 Valine Admin</h1><p><a href="https://github.com/DesertsP/Valine-Admin">Valine Admin</a> 是 <code>Valine</code> 评论系统的后端功能补充和增强，主要实现评论邮件通知、评论管理、垃圾评论过滤等功能。</p><h2 id="云引擎一键部署"><a href="#云引擎一键部署" class="headerlink" title="云引擎一键部署"></a>云引擎一键部署</h2><p><img src="https://pic.imgdb.cn/item/61024e2e5132923bf850d532.jpg" alt="云引擎一键部署1"><br><img src="https://pic.imgdb.cn/item/61024ed75132923bf853638f.jpg" alt="云引擎一键部署2"><br><img src="https://pic.imgdb.cn/item/61024f6f5132923bf855c15f.jpg" alt="云引擎一键部署3"></p><h2 id="配置邮件提醒"><a href="#配置邮件提醒" class="headerlink" title="配置邮件提醒"></a>配置邮件提醒</h2><p><img src="https://pic.imgdb.cn/item/610254205132923bf8686667.jpg" alt="配置 Valine Admin 环境变量"></p><blockquote><p>此处需要用到QQ邮箱授权码，详细获取方法可在后面查看。</p></blockquote><h3 id="相关参数说明"><a href="#相关参数说明" class="headerlink" title="相关参数说明"></a>相关参数说明</h3><table><thead><tr><th>变量</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>SITE_NAME</td><td>xx的博客</td><td>[必填]博客名称</td></tr><tr><td>SITE_URL</td><td><a href="https://sayll.github.io/">https://sayll.github.io/</a></td><td>[必填]首页地址</td></tr><tr><td>SMTP_SERVICE</td><td>QQ</td><td>[新版支持]邮件服务提供商，支持 QQ、163、126、Gmail 以及 <a href="https://nodemailer.com/smtp/well-known/#supported-services">更多</a></td></tr><tr><td>SMTP_USER</td><td><a href="mailto:&#120;&#x78;&#x78;&#x78;&#120;&#x78;&#x40;&#x71;&#113;&#x2e;&#x63;&#x6f;&#109;">&#120;&#x78;&#x78;&#x78;&#120;&#x78;&#x40;&#x71;&#113;&#x2e;&#x63;&#x6f;&#109;</a></td><td>[必填]SMTP登录用户</td></tr><tr><td>SMTP_PASS</td><td>ccxxxxxxxxch</td><td>[必填]SMTP登录密码（此处的密码非邮箱密码，而是授权码）</td></tr><tr><td>SENDER_NAME</td><td>博主</td><td>[必填]发件人</td></tr><tr><td>SENDER_EMAIL</td><td><a href="mailto:&#120;&#120;&#x78;&#x78;&#120;&#120;&#64;&#113;&#x71;&#46;&#99;&#111;&#x6d;">&#120;&#120;&#x78;&#x78;&#120;&#120;&#64;&#113;&#x71;&#46;&#99;&#111;&#x6d;</a></td><td>[必填]发件邮箱</td></tr><tr><td>ADMIN_URL</td><td><a href="https://xxx.avosapps.us/">https://xxx.avosapps.us/</a></td><td>[建议]Web主机二级域名（共享域名），用于自动唤醒</td></tr><tr><td>BLOGGER_EMAIL</td><td><a href="mailto:&#120;&#x78;&#x78;&#120;&#120;&#x40;&#103;&#x6d;&#97;&#x69;&#108;&#46;&#99;&#x6f;&#109;">&#120;&#x78;&#x78;&#120;&#120;&#x40;&#103;&#x6d;&#97;&#x69;&#108;&#46;&#99;&#x6f;&#109;</a></td><td>[可选]博主通知收件地址，默认使用SENDER_EMAIL</td></tr><tr><td>AKISMET_KEY</td><td>xxxxxxxx</td><td>[可选]Akismet Key 用于垃圾评论检测，设为MANUAL_REVIEW开启人工审核，留空不使用反垃圾</td></tr></tbody></table><blockquote><p>更多配置，请查看 <a href="https://github.com/DesertsP/Valine-Admin">开源文档</a></p></blockquote><h3 id="生成QQ邮箱授权码"><a href="#生成QQ邮箱授权码" class="headerlink" title="生成QQ邮箱授权码"></a>生成QQ邮箱授权码</h3><p><img src="https://pic.imgdb.cn/item/610256ca5132923bf8729ba6.jpg" alt="QQ邮箱授权码"></p><h2 id="重启服务"><a href="#重启服务" class="headerlink" title="重启服务"></a>重启服务</h2><p>上述配置配置完成后，重启服务 <code>Valine-Admin</code> 服务，使上述配置生效<br><img src="https://pic.imgdb.cn/item/61025a535132923bf8826403.jpg" alt="重启服务"></p><h2 id="评论管理"><a href="#评论管理" class="headerlink" title="评论管理"></a>评论管理</h2><p>进入前面配置好的 <code>ADMIN_URL</code>（共享域名）完成注册登陆，例如我之前所设置的共享域名 <code>sayll-io</code>。<br>访问地址即为：<a href="https://sayll-io.avosapps.us/sign-up">https://sayll-io.avosapps.us/sign-up</a></p><blockquote><p>到目前为止，如果一切顺利。我们已经可以通过留言及回复收到对应通知。不过 <code>LeanCloud</code> 开发版 存在休眠机制，后续文章我们详细聊聊如果让邮件收发服务进行定时唤醒。</p></blockquote><h2 id="文章参考"><a href="#文章参考" class="headerlink" title="文章参考"></a>文章参考</h2><blockquote><p><a href="https://deserts.io/valine-admin-document/">Valine Admin 配置手册</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搭建 </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Blog之Valine评论系统</title>
      <link href="/posts/37822/"/>
      <url>/posts/37822/</url>
      
        <content type="html"><![CDATA[<h2 id="Valine评论系统"><a href="#Valine评论系统" class="headerlink" title="Valine评论系统"></a>Valine评论系统</h2><p>遵循 <code>Valine</code> 的指引去配置你的 <a href="https://leancloud.app/">LeanCloud</a> 应用</p><h2 id="配置LeanCloud"><a href="#配置LeanCloud" class="headerlink" title="配置LeanCloud"></a>配置LeanCloud</h2><p>LeanCloud分为国内和国际版，本教程以国际版作为演示，国内版配置稍有不同，暂不做讨论。</p><ul><li>国际版地址: <a href="https://leancloud.app/">https://leancloud.app/</a></li><li>国内版地址: <a href="https://www.leancloud.cn/">https://www.leancloud.cn/</a></li></ul><h3 id="注册及验证账户信息"><a href="#注册及验证账户信息" class="headerlink" title="注册及验证账户信息"></a>注册及验证账户信息</h3><p>这个属于基本中的基本，请自行验证不做过多阐述。</p><p><img src="https://pic.imgdb.cn/item/61021aa15132923bf8a7d836.jpg" alt="补全信息"></p><h3 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h3><p><img src="https://pic.imgdb.cn/item/61021bc65132923bf8ab18f9.jpg" alt="创建应用"></p><h3 id="配置安全域名"><a href="#配置安全域名" class="headerlink" title="配置安全域名"></a>配置安全域名</h3><p><img src="https://pic.imgdb.cn/item/61021d955132923bf8b0252a.jpg" alt="配置安全域名"></p><h3 id="获取AppID及AppKey"><a href="#获取AppID及AppKey" class="headerlink" title="获取AppID及AppKey"></a>获取AppID及AppKey</h3><p><img src="https://pic.imgdb.cn/item/61021f2f5132923bf8b5ec80.jpg" alt="获取AppID及AppKey"></p><h3 id="配置Hexo主题配置"><a href="#配置Hexo主题配置" class="headerlink" title="配置Hexo主题配置"></a>配置Hexo主题配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">comments:</span> <span class="comment"># 配置使用 Valine 留言系统</span></span><br><span class="line">  <span class="attr">use:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Valine</span></span><br><span class="line"></span><br><span class="line"><span class="attr">valine:</span></span><br><span class="line">  <span class="attr">appId:</span> <span class="comment"># 将之前复制保存的 AppID 填入该处 </span></span><br><span class="line">  <span class="attr">appKey:</span> <span class="comment"># 将之前复制保存的 appKey 填入该处 </span></span><br><span class="line">  <span class="attr">serverURLs:</span> <span class="comment"># 国际版该字段留空，国内版需填写对应的服务地址</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搭建 </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Blog搭建之框架选择</title>
      <link href="/posts/65289/"/>
      <url>/posts/65289/</url>
      
        <content type="html"><![CDATA[<h2 id="框架选择"><a href="#框架选择" class="headerlink" title="框架选择"></a>框架选择</h2><p>常见的博客框架有Hexo、Hugo、Jekyll、VuePress、WordPress、Halo等，后面我们一一介绍。</p><h2 id="静态框架"><a href="#静态框架" class="headerlink" title="静态框架"></a>静态框架</h2><h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a><a href="https://hexo.io/zh-cn/">Hexo</a></h3><p>nodejs实现，快速、简洁且高效的博客框架，拥有上百种开源主题选择。</p><p><strong>优点</strong></p><ul><li>超快速度</li><li>支持 Markdown</li><li>一键部署</li><li>插件和可扩展性</li></ul><p><strong>缺点</strong></p><ul><li>没有数据库的支撑</li><li>环境搭建大部分是在本地运行，这使得脱离电脑难以发布文章</li></ul><h3 id="Hugo"><a href="#Hugo" class="headerlink" title="Hugo"></a><a href="https://gohugo.io/">Hugo</a></h3><p>Hugo是由Go语言实现的静态网站生成器，简单、易用、高效、易扩展、快速部署，官网称其为”世界上最快的网站建设框架”</p><p><strong>优点</strong></p><ul><li>编译速度超快</li><li>部署简洁</li></ul><p><strong>缺点</strong></p><ul><li>没有插件</li></ul><blockquote><p>比较适合文章数量多，追求编译速度的同学</p></blockquote><h3 id="Jekyll"><a href="#Jekyll" class="headerlink" title="Jekyll"></a><a href="https://www.jekyll.com.cn/">Jekyll</a></h3><p>Jekyll是一个简单的静态网站生成器，用于生成个人，项目或组织的网站。它由GitHub联合创始人汤姆·普雷斯顿·沃纳用Ruby编写，并根据MIT许可证发布。</p><p><strong>优点</strong></p><ul><li>Github 支持度更高</li></ul><h3 id="VuePress"><a href="#VuePress" class="headerlink" title="VuePress"></a><a href="https://vuepress.vuejs.org/zh/">VuePress</a></h3><p>nodejs实现，Vue 驱动的静态网站生成器</p><p><strong>优点</strong></p><ul><li>简洁至上</li><li>Vue 驱动</li><li>高性能</li><li>丰富插件</li><li>多个打包工具选择</li></ul><blockquote><p>纯静态网址生产器，更多的场景是编写文档</p></blockquote><h2 id="动态框架"><a href="#动态框架" class="headerlink" title="动态框架"></a>动态框架</h2><h3 id="WordPress"><a href="#WordPress" class="headerlink" title="WordPress"></a><a href="https://cn.wordpress.org/">WordPress</a></h3><p>WordPress是一个以PHP和MySQL为平台的自由开源的博客软件和内容管理系统，具有插件架构和模板系统，算是非常老牌的博客框架了。</p><p><strong>优点</strong></p><ul><li>现有的主题及插件众多</li><li>简单易用，傻瓜式安装</li><li>庞大的用户量及活跃的社区</li><li>安全性高</li></ul><p><strong>缺点</strong></p><ul><li>过于臃肿，插件安装越多也就变得越发迟缓</li></ul><blockquote><p>Wordpress 是款非常优秀的CMS系统，它的缺点很少。对于中小型网站应该是不错的选择，但对于大型的门户网站，数据库、用户管理、内容的分类管理等方面的限制。</p></blockquote><h3 id="Halo"><a href="#Halo" class="headerlink" title="Halo"></a><a href="https://halo.run/">Halo</a></h3><p>java实现，一款现代化的博客/CMS系统。</p><p><strong>优点</strong></p><ul><li>易于部署</li><li>REST API</li><li>模板系统</li><li>附件系统</li><li>评论系统</li></ul><p><strong>缺点</strong></p><ul><li>比较小众</li><li>插件不多</li></ul><blockquote><p>自由度比较高，国人开发更符合国情吧~</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搭建 </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工具集</title>
      <link href="/posts/61500/"/>
      <url>/posts/61500/</url>
      
        <content type="html"><![CDATA[<h2 id="图床"><a href="#图床" class="headerlink" title="图床"></a>图床</h2><ul><li>微博图床【免费】<br>有页面和浏览器插件可以使用，非常方便。国内速度也非常快。<ul><li><a href="https://photo.weibo.com/photos/upload">上传地址</a></li><li><a href="https://chrome.google.com/webstore/detail/%E6%96%B0%E6%B5%AA%E5%BE%AE%E5%8D%9A%E5%9B%BE%E5%BA%8A/fdfdnfpdplfbbnemmmoklbfjbhecpnhf/related">插件地址</a></li></ul></li><li>upload.cc【免费】<br>有页面和浏览器插件可以使用，香港那边开发服务，速度也不错。<ul><li><a href="https://upload.cc/">上传地址</a></li><li><a href="https://chrome.google.com/webstore/detail/uploadcc-screen-capture-t/mjnohlnebmjeoplfnmdkcjfpenkgnahi">插件地址</a></li></ul></li><li>superbed.cn【免费】<br>聚合图床 - 高速稳定的图片上传和外链服务，具有配套的客户端上传、插件支持、上传接口支持<ul><li><a href="https://www.superbed.cn/">上传地址</a></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github 免密码提交之SSH</title>
      <link href="/posts/53867/"/>
      <url>/posts/53867/</url>
      
        <content type="html"><![CDATA[<h2 id="关于-SSH"><a href="#关于-SSH" class="headerlink" title="关于 SSH"></a>关于 SSH</h2><p>Secure Shell（安全外壳协议，简称SSH）是一种加密的网络传输协议，可在不安全的网络中为网络服务提供安全的传输环境。SSH通过在网络中创建安全隧道来实现SSH客户端与服务器之间的连接。SSH最常见的用途是远程登录系统，人们通常利用SSH来传输命令行界面和远程执行命令。</p><blockquote><p>使用 SSH 协议可以连接远程服务器和服务并向它们验证。 利用 SSH 密钥可以连接 GitHub，而无需在每次访问时都提供用户名和个人访问令牌。</p></blockquote><h2 id="检查现有-SSH-密钥"><a href="#检查现有-SSH-密钥" class="headerlink" title="检查现有 SSH 密钥"></a>检查现有 SSH 密钥</h2><p>在生成 SSH 密钥之前，您可以检查是否有任何现有的 SSH 密钥。</p><ol><li>打开 终端</li><li>输入 <code>ls -al ~/.ssh</code> 以查看是否存在现有 SSH 密钥：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ls -al ~/.ssh</span></span><br></pre></td></tr></table></figure></li><li>检查目录列表以查看是否已经有 SSH 公钥。 默认情况下，公钥的文件名是以下之一<ul><li>id_rsa.pub</li><li>id_ecdsa.pub</li><li>id_ed25519.pub</li></ul></li></ol><h2 id="生成-SSH-密钥"><a href="#生成-SSH-密钥" class="headerlink" title="生成 SSH 密钥"></a>生成 SSH 密钥</h2><p>如果未存在 SSH 密钥，可主动生成 SSH 密钥。</p><ol><li>打开 终端</li><li>粘贴下面的文本（替换为您的 GitHub 电子邮件地址）<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh-keygen -t ed25519 -C <span class="string">&quot;your_email@example.com&quot;</span></span></span><br></pre></td></tr></table></figure></li><li>提示您“Enter a file in which to save the key（输入要保存密钥的文件）”时，按 Enter 键。 这将接受默认文件位置。<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> Enter a file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/c/Users/you/.ssh/id_ed25519):[Press enter]</span></span><br></pre></td></tr></table></figure></li><li>在提示时输入安全密码<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> Enter passphrase (empty <span class="keyword">for</span> no passphrase): [Type a passphrase]</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Enter same passphrase again: [Type passphrase again]</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="新增-SSH-密钥到-GitHub-帐户"><a href="#新增-SSH-密钥到-GitHub-帐户" class="headerlink" title="新增 SSH 密钥到 GitHub 帐户"></a>新增 SSH 密钥到 GitHub 帐户</h2><p>在新增 SSH 密钥到 GitHub 帐户后，您可以重新配置任何本地仓库使用 SSH。</p><ol><li>将 SSH 公钥复制到剪贴板<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> clip &lt; ~/.ssh/id_ed25519.pub</span></span><br></pre></td></tr></table></figure><blockquote><p>提示：如果 clip 不可用，可找到隐藏的 .ssh 文件夹，在常用的文本编辑器中打开该文件，并将其复制到剪贴板。</p></blockquote></li><li>在 Github 右上角，单击您的个人资料照片，然后单击 Settings（设置）。</li><li>在用户设置侧边栏中，单击 SSH and GPG keys（SSH 和 GPG 密钥）。</li><li>单击 New SSH key（新 SSH 密钥）或 Add SSH key（添加 SSH 密钥）。</li><li>将密钥粘贴到 “Key”（密钥）字段, Title 部分可填写你的设备标识（如 My PC）便于管理。</li></ol><h2 id="测试-SSH-连接"><a href="#测试-SSH-连接" class="headerlink" title="测试 SSH 连接"></a>测试 SSH 连接</h2><ol><li><p>打开终端输入一下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh -T git@github.com</span></span><br></pre></td></tr></table></figure><p>当你在终端看到一下消息则说明已成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> Hi username! You<span class="string">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span></span></span><br></pre></td></tr></table></figure></li><li><p>验证生成的消息包含您的用户名。 如果收到“权限被拒绝”消息，请参阅“错误： <a href="https://docs.github.com/cn/github/authenticating-to-github/troubleshooting-ssh/error-permission-denied-publickey">权限被拒绝（公钥）</a> ”。</p></li></ol><blockquote><p>如果上面一切顺利的话，自己所属的该设备再提交代码时就不会再要求输入邮箱密码信息了。</p></blockquote><h2 id="文章参考"><a href="#文章参考" class="headerlink" title="文章参考"></a>文章参考</h2><ul><li><a href="https://docs.github.com/cn/github/authenticating-to-github/connecting-to-github-with-ssh/about-ssh">使用 SSH 连接到 GitHub</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搭建 </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
